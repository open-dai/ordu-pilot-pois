package com.sampas.socbs.core.network;
/**
 * Contructs a graph based on relationships between the entities (objects) 
 * modelled by the graph. <BR>
 * <BR>
 * The underlying graph is generated by continually adding objects to the 
 * generator. The Generator determines the relationships between the objects
 * and decides how to model the relationship and the objects themselves in the
 * graph.<BR>
 * <BR>
 * The GraphGenerator is the upper level of the graph construction process.
 * It is a wrapper around the GraphBuilder class that is intended to 
 * instruct the builder how to build the underyling graph structure.
 * 
 * @see IGraphBuilder
 * 
 * @author Justin Deoliveira, Refractions Research Inc, jdeolive@refractions.net
 * @source $URL: http://svn.geotools.org/tags/2.4.4/modules/extension/graph/src/main/java/org/geotools/graph/build/GraphGenerator.java $
 */
public interface IGraphGenerator {
 
  /**
   * Adds an object to the graph.
   * 
   * @param obj The object to be modelled in the graph.
   * 
   * @return The graph component used to model the object.
   */
  public IGraphable add(Object obj);
 
  /**
   * Retrieves a component of the graph.
   * 
   * @param obj The object modelled by the component.
   *
   * @return The graph component used to model the object.
   */ 
  public IGraphable get(Object obj);
  
  /**
   * Removes an object from the graph.
   * 
   * @param obj The object modelled by the component.
   *
   * @return The graph component used to model the object.
   */
  public IGraphable remove(Object obj);
  
  /**
   * Sets the underlying builder used to physically construct the graph.
   * 
   * @param builder The new underlying GraphBuilder.
   */
  public void setGraphBuilder(IGraphBuilder builder);
  
  /**
   * Returns the underlying builder.
   * 
   * @return The underyling builder.
   */
  public IGraphBuilder getGraphBuilder();
  
  /**
   * Returns the graph being generated. 
   * 
   * @return The generated graph.
   */
  public IGraph getGraph();
  
//  /**
//   * Signals the generator that graph construction is about to begin.
//   *
//   */
//  public void init();
//  
//  /**
//   * Signals that generator that construction of the graph is complete.
//   */
//  public void finish();
}
